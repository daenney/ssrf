// MIT License
//
// Copyright (c) 2022 Daniele Sluijters
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// WARNING: This file is generated by ssrfgen. DO NOT EDIT.

package ssrf

import (
    "net/netip"
)

var (
    // IPv4DeniedPrefixes contains IPv4 special purpose IP prefixes from IANA
    // as well as a number of other prefixes we wish to block by default
    // https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry.xhtml
    IPv4DeniedPrefixes = []netip.Prefix{
        {{- range $e := .V4 }}
        netip.MustParsePrefix("{{ $e.Prefix }}"), // {{ $e.Name }} ({{ $e.RFC }})
        {{- end }}
    }

    // IPv6GlobalUnicast is the prefix set aside by IANA for global unicast
    // assignments, i.e "the internet"
    IPv6GlobalUnicast = netip.MustParsePrefix("{{ .V6GlobalUnicast }}")

    // IPv6NAT64Prefix is the prefix set aside for NAT64. This allows a server
    // to only have an IPv6 address but still be able to talk to an IPv4-only
    // server through DNS64+NAT64
    IPv6NAT64Prefix = netip.MustParsePrefix("64:ff9b::/96")

    // IPv6DeniedPrefixes contains IPv6 special purpose IP prefixes from IANA
    // within the IPv6 Global Unicast range that we wish to block by default
    // https://www.iana.org/assignments/iana-ipv6-special-registry/iana-ipv6-special-registry.xhtml
    IPv6DeniedPrefixes = []netip.Prefix{
        {{- range $e := .V6 }}
        netip.MustParsePrefix("{{ $e.Prefix }}"), // {{ $e.Name }} ({{ $e.RFC }})
        {{- end }}
    }
)
